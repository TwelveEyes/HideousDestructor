

class bltest:hdweapon{
	default{hdweapon.refid "blt";}
	states{
	fire:
		TNT1 A 0{
			HDBulletActor.FireBullet(self);
		}goto nope;
	}
}
class HDBulletTracer:LineTracer{
	hdbulletactor bullet;
	actor shooter;
	override etracestatus tracecallback(){
		if(results.hittype==TRACE_HitWall){
			int skipsize=bullet.tracelines.size();
			for(int i=0;i<skipsize;i++){
				if(bullet.tracelines[i]==results.hitline)return TRACE_Skip;
			}
		}else if(results.hittype==TRACE_HitActor){
			if(results.hitactor==bullet)return TRACE_Skip;
			int skipsize=bullet.traceactors.size();
			for(int i=0;i<skipsize;i++){
				if(bullet.traceactors[i]==results.hitactor)return TRACE_Skip;
			}
		}else if(
			results.hittype==TRACE_HitFloor
			||results.hittype==TRACE_HitCeiling
		){
			int skipsize=bullet.tracesectors.size();
			for(int i=0;i<skipsize;i++){
				if(bullet.tracesectors[i]==results.hitsector)return TRACE_Skip;
			}
		}
		return TRACE_Stop;
	}
}
class HDBulletActor:Actor{
	double penetration; //more juvenile giggling
	property penetration:penetration;
	array<line> tracelines;
	array<actor> traceactors;
	array<sector> tracesectors;

	int hdbulletflags;
	flagdef neverricochet:hdbulletflags,0;

	default{
		+noblockmap
		+missile
		height 0.1;radius 0.1;
		hdbulletactor.penetration 0;
		speed 128;
	}
	static HDBulletActor FireBullet(
		actor caller,
		class<HDBulletActor> type="HDBulletActor",
		double zofs=999
	){
		if(zofs==999)zofs=caller.height-6;
		let bbb=HDBulletActor(spawn(type,(caller.pos.x,caller.pos.y,caller.pos.z+zofs)));
		bbb.target=caller;
		bbb.angle=caller.angle;bbb.pitch=caller.pitch;
		bbb.vel=caller.vel;
		bbb.A_ChangeVelocity(bbb.speed*cos(bbb.pitch),0,bbb.speed*sin(-bbb.pitch),CVF_RELATIVE);
		return bbb;
	}
	states{
	spawn:
		BAL1 A -1 nodelay A_JumpIf(!hd_debug,1);
		BLET A -1 A_SetScale(0.3);
		stop;
	death:
		TNT1 A 0;
		stop;
	}
	override void tick(){
		if(isfrozen())return;
if(level.time%17)return;
		if(!bmissile){
			super.tick();
			return;
		}
		if(vel==(0,0,0))bmissile=false;

		tracelines.clear();
		traceactors.clear();
		tracesectors.clear();

		hdbullettracer blt=HDBulletTracer(new("HDBulletTracer"));
		if(!blt)return;
		blt.bullet=hdbulletactor(self);
		blt.shooter=target;
		vector3 newpos=pos;

		//if in the sky
		if(ceilingz-pos.z<vel.z){
			setorigin(pos+vel,false);
			vel.z--;
			return;
		}

		//get speed, set counter
		double distanceleft=vel.length();
		speed=distanceleft;
		do{
			double cosp=cos(pitch);
			vector3 vu=vel.unit();
			blt.trace(
				pos,
				cursector,
				vu,
				distanceleft,
				0//TRACE_ReportPortals
			);
			traceresults bres=blt.results;

			sector sectortodamage=null;

			if(bres.hittype==TRACE_HitNone){
				newpos=pos+vu*speed;
				distanceleft=0;
			}else{
				newpos=bres.hitpos;
				distanceleft-=max(bres.distance,0.01); //safeguard against infinite loops
				if(bres.hittype==TRACE_HitWall){
					let hitline=bres.hitline;
					tracelines.push(hitline);

					//get the sector on the opposite side of the impact
					sector othersector=bres.side?hitline.frontsector:hitline.backsector;

					//check if the line is even blocking the bullet
					bool isblocking=(
						!(hitline.flags&line.ML_TWOSIDED) //one-sided
						||hitline.flags&line.ML_BLOCKING
						||hitline.flags&line.ML_BLOCKEVERYTHING
						||hitline.flags&line.ML_BLOCKHITSCAN
						//||hitline.flags&line.ML_BLOCKPROJECTILE //let's say they go too fast for now
						||bres.tier==TIER_FFloor //3d floor
						||( //upper or lower and sky
							bres.tier
							&&(
								(
									(bres.tier==TIER_Upper)
									&&(othersector.gettexture(othersector.ceiling)==skyflatnum)
								)||(othersector.gettexture(othersector.floor)==skyflatnum)
							)
						)
					);
					//if not blocking, pass through and continue
					if(!isblocking){
						hitline.activate(target,bres.side,SPAC_PCross|SPAC_AnyCross);
						continue;
					}

					//"SPAC_Impact" is so wonderfully onomatopoeic
					//would add SPAC_Damage but it doesn't work in 4.1.3???
					hitline.activate(target,bres.side,SPAC_Impact|SPAC_Use);

					//get the sector of the wall that is being hit
					sectortodamage=othersector;

					HitGeometry(hitline,sectortodamage);
				}else if(
					bres.hittype==TRACE_HitFloor
					||bres.hittype==TRACE_HitCeiling
				){
					sector hitsector=bres.hitsector;
					tracesectors.push(hitsector);

					if(
						(
							(bres.hittype==TRACE_HitCeiling)
							&&(hitsector.gettexture(hitsector.ceiling)==skyflatnum)
						)||(
							(bres.hittype==TRACE_HitFloor)
							&&(hitsector.gettexture(hitsector.floor)==skyflatnum)
						)
					)continue;

					HitGeometry(null,hitsector);
				}else if(bres.hittype==TRACE_HitActor){
					let hitactor=bres.hitactor;
					traceactors.push(hitactor);
					//set up the damage thinker
					//move a little into the actor
					//spawn blood as necessary
					//see if the bullet ricochets
						//just have it fly off in a random direction, we can revisit this later
						//reduce penetration and streamlinedness
					//if not ricochet, see if the bullet penetrates, and if it does:
						//move to the other side of the actor
						//spawn more blood for the exit wound
					//destroy if not ricocheting or penetrating
				}
			}
			//move bullet to next position
			setorigin(newpos,true);
		}while(distanceleft>0);



		//destroy the linetracer just in case it interferes with savegames
		blt.destroy();

		//update velocity
		vel.z--;
	}
	virtual void HitGeometry(line hitline,sector hitsector){
		//inflict damage on destructibles
			//GZDoom native first
			//then doorbuster
		//check if the spot immediately ahead (+dir*0.5) is a pointinlevel
			//if it is:
				//consider exploding
				//if not explode, reduce velocity
				//"continue"
		//"puff"
		//virtual void puff(textureid hittex,bool reverse=false){}
			//flesh: bloodsplat
			//fluids: splash
			//anything else: puff and add bullet hole
		//see if the bullet penetrates:
		//virtual bool checkpenetration(actor hitactor,line hitline,sector hitsector){}
			//if penetration rating is less than zero, just say no
			//"ispointinlevel" loop up to max penetration point (check 3d floor first)
			//http://www.how-i-did-it.org/drywall/ammunition.html
				//note: according to this test, buckshot penetrated everything
				//fast makes this penetrate LESS
				//hardness
				//mass
				//tumbling
			//check pointinmap in a loop up to max penetration point
		//if it DOES penetrate:
			//move to the other side
			//check the texture immediately behind the new position
				//"puff"
				//add a bullet hole
			//reduce penetration and streamlinedness
		//if it does NOT penetrate:
			//ricochet:
				//don't ricochet on meat
				//angle of line
				//above plus 180, normalized
				//pick the one closer to the bullet's own angle
				//if impact is too steep, randomly fail to ricochet
				//reduce penetration and streamlinedness
			//set death if not ricochet
	}
	virtual void HitActor(actor hitactor,out vector3 newpos){
	}
}

















//old shit below (still in use)




// ------------------------------------------------------------
// The Bullet!
// ------------------------------------------------------------

//testing performance when spamming
class HDBulletb:PlasmaBall replaces PlasmaBall{
	override void postbeginplay(){
		if(!hd_debug){super.postbeginplay();return;}
		for (int i=14;i;i--){
			A_SpawnItemEx("HDBullet",0,0,0,vel.x+frandom(-1,1),vel.y+frandom(-1,1),vel.z+frandom(-1,1),0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS|SXF_ABSOLUTEMOMENTUM);
		}
		destroy();
	}
}



//keep it simple: 1 of this = 1 unit of radius
class BulletResistance:InventoryFlag{default{inventory.maxamount 100;}}


class HDBullet:HDActor{
	/*
		special usages:
		accuracy: hardness/pointiness.
		woundhealth: "extra" damage from frangibility, etc.
	*/
	double grav;
	double oneoverspeed;
	double speedsquared;
	bool inthesky;
	vector3 skypos;
	transient flinetracedata blt;
	sector othersector;
	actor throughthis;
	double penetration; //juvenile giggling

	class<actor> distantsounder;
	property distantsounder:distantsounder;

	enum BulletConsts{
		BULLET_TERMINALVELOCITY=-277,
		BULLET_CRACKINTERVAL=64,

		BLT_HITTOP=1,
		BLT_HITBOTTOM=2,
		BLT_HITMIDDLE=3,
		BLT_HITONESIDED=4,
	}
	default{
		projectile; -nogravity
		+noextremedeath +cannotpush +hittracer +forcexybillboard
		height 0.05;radius 0.05;
		maxstepheight 0;
		missileheight 0; projectilekickback 20;
		damagefunction(0);
		hdbullet.distantsounder "none";

		mass 40; //60 426
		speed 40;//accuracy 20;
		pushfactor 0.1;
	}
	override void beginplay(){
		damagetype="SmallArms0"; //how do you set this in the defaults???
		super.beginplay();
		othersector=null;
	}
	override void postbeginplay(){
		super.postbeginplay();
		throughthis=target;
		if(distantsounder!="none"){
			actor m=spawn(distantsounder,pos,ALLOW_REPLACE);
			m.target=target;
		}

		if(
			frandom(0,ceilingz-floorz)<speed*0.3
		)A_AlertMonsters();

		grav=getgravity();
		if(target && !pitch)pitch=target.pitch;

		//these are particular to true bullets and not grenades.
		LongArmWobble();
		Gunsmoke();
		/*
			this is included in initialization because all pre-ZScript weapon code
			would A_SpawnItemEx the bullets adding only the shooter's own momentum,
			leaving the bullet to set its own state.
			summoning a bullet will cause it to go twice as fast.
		*/
		A_ChangeVelocity(speed*cos(pitch),0,speed*sin(-pitch),CVF_RELATIVE);
	}
	states{
	spawn:
		BLET A -1 nodelay{
			if(hd_debug){
				tics=0;
			}else scale=(0.3,0.3);
		}
		BAL1 A -1;
	death:
		TNT1 A 4{
			bnointeraction=true;
			bmissile=false;
		}stop;
	}
	override void tick(){
		if(isfrozen())return;
		if(!bmissile){
			bnointeraction=true;
			actor.tick();
			return;
		}

		//if it's in the sky, do a separate thing instead
		if(inthesky){
			skypos+=vel;

			//this one's slightly different
			if(max(abs(skypos.x),abs(skypos.y))>=32768){destroy();return;}

			setorigin((skypos.xy,pos.z),false);
			if(ceilingz>skypos.z){
				if(ceilingpic!=skyflatnum){
					destroy();return;
				}
				inthesky=false;
				binvisible=false;
				if(skypos.z<floorz)setz(ceilingz-0.1);
				else setz(skypos.z);
			}
			if(vel.z>BULLET_TERMINALVELOCITY)vel.z-=grav;
			return;
		}


		//point actor in velocity
		//set some basic variables
		speed=vel.length();
		speedsquared=vel dot vel;
		penetration=(speed+(mass>>2))*accuracy*0.001/pushfactor*frandom(0.7,1.);
		A_FaceMovementDirection();

		//hack to escape shooter
		bool bsbak=false;
		if(throughthis){
			bsbak=throughthis.bshootable;
			throughthis.bshootable=false;
		}


		//gross hack for triggering passable lines
		LineAttack(angle,speed,pitch,0,"None","CheckPuff",
			LAF_NORANDOMPUFFZ|LAF_OVERRIDEZ|LAF_NOIMPACTDECAL|LAF_TARGETISSOURCE
		,offsetz:0);


		//get the line
		LineTrace(
			angle,
			speed,
			pitch,
			flags:0,
			data:blt
		);

		//reset hacks
		if(throughthis){
			throughthis.bshootable=bsbak;
			throughthis=null;
		}
		vector3 plushitdir=blt.hitlocation+blt.hitdir;


		//find points close to players and spawn crackers
		//also spawn trails if applicable
		name cracker="";
		if(speed>256){
			if(speed>1000){
				if(mass>200) cracker="SupersonicTrailBig";
				else cracker="SupersonicTrail";
			}else if(speed>800){
				cracker="SupersonicTrail";
			}else if(speed>HDCONST_SPEEDOFSOUND){
				cracker="SupersonicTrailSmall";
			}else if(speed>100){
				cracker="SubsonicTrail";
			}
			if(cracker!=""){
				vector3 crackbak=pos;
				vector3 crackinterval=blt.hitdir*BULLET_CRACKINTERVAL;
				int j=max(1,blt.distance*(1./BULLET_CRACKINTERVAL));
				for(int i=0;i<j;i++){
					setxyz(crackbak+crackinterval*i);
					if(hd_debug>1)A_SpawnParticle("yellow",SPF_RELVEL|SPF_RELANG,
						size:12,
						velx:speed*cos(pitch)*0.001,
						velz:-speed*sin(pitch)*0.001
					);
					if(missilename)spawn(missilename,pos,ALLOW_REPLACE);
					bool gotplayer=false;
					for(int k=0;!gotplayer && k<MAXPLAYERS;k++){
						if(playeringame[k] && players[k].mo){
							if(
								distance3d(players[k].mo)<256
							){
								gotplayer=true;
								spawn(cracker,pos,ALLOW_REPLACE);
							}
						}
					}
				}
				setxyz(crackbak);
			}
		}

		//move to new location
		vector3 posbak=blt.hitlocation;
		setorigin(posbak,true);

		//and yet another check
		if(max(abs(pos.x),abs(pos.y),-pos.z)>=32768){destroy();return;}

		//wobble
		if(pushfactor&&speed){
			double newproportion=blt.distance/speed;
			double slowdown=-frandom(0,pushfactor)*0.01*(newproportion);
			speed+=slowdown;
			A_Changevelocity(
				slowdown,
				frandom(-pushfactor,pushfactor)*newproportion,
				0,CVF_RELATIVE
			);
		}

		//hit actor, ignore all the wall geometry stuff below
		if(blt.hitactor){
			actor hitactor=blt.hitactor;
			tracer=hitactor;
			setorigin(blt.hitlocation+blt.hitdir*frandom(0,hitactor.radius*0.6),true);

			//crit?
			bool crit=false;
			double critangle=absangle(angleto(hitactor),angle);
			if(
				(
					critangle<12.
					&&abs(
						(hitactor.pos.z+hitactor.height*0.6)-
						(blt.hitlocation.z+blt.hitdir.z*hitactor.radius)
					)<hitactor.height*0.2
				)
			){
				if(hd_debug)A_Log("CRIT!");
				crit=true;
			}

			//pierce?
			bool pierce=false;
			double hitresistance=(
				min(64,hitactor.radius)*frandom(crit?0.5:0.7,1.1)
				+hitactor.countinv("BulletResistance")*frandom(crit?0.7:0.4,1.1)
			);
			double netpenetration=penetration/hitresistance;
//A_LogFloat(hitresistance);
			let hdp=hdplayerpawn(hitactor);
			int hdpwoundcount=0;
			if(hdp){
				hdpwoundcount=hdp.woundcount;
				netpenetration=max(0,
					netpenetration-hdp.armourlevel*frandom(0.1,0.4)
				);
			}

			//damagetype?
			if(hitactor.player){
				if(penetration>12)damagetype="SmallArms3";
				else if(penetration>8)damagetype="SmallArms2";
				else if(penetration>5)damagetype="SmallArms1";
				else if(penetration>2)damagetype="SmallArms0";
				else damagetype="Bashing";
			}else{
				if(netpenetration>0.24)damagetype="SmallArms3";
				else if(netpenetration>0.18)damagetype="SmallArms2";
				else if(netpenetration>0.12)damagetype="SmallArms1";
				else if(netpenetration>0.07)damagetype="SmallArms0";
				else damagetype="Bashing";
			}

			//pierce/ricochet?
			if(critangle>frandom(70,120)){
				if(hd_debug>1)A_Log("Ricochet!");
				throughthis=hitactor;
				angle+=deltaangle(angleto(hitactor),angle)+frandom(-10,10);
				pitch+=frandom(-10,10);
				A_ChangeVelocity(cos(pitch)*speed,0,sin(pitch)*-speed,CVF_RELATIVE|CVF_REPLACE);
			}else if(netpenetration>1.){
				if(hd_debug>1)A_Log("--- pierce! --->");
				throughthis=hitactor;
				pierce=true;
			}else if(netpenetration>0.24){
				if(hd_debug>1)A_Log("-pierce->");
				pierce=true;
			}else if(hd_debug>1)A_Log("|STOPPED|");

			//determine damage
			int dmg=(speed+mass)*0.012;

			int maxdmg=dmg+random(woundhealth>>2,woundhealth);
			if(!hdp&&pierce){
				dmg*=2;
				maxdmg+=woundhealth;
				if(crit){
					dmg*=1.5;
					maxdmg=dmg+woundhealth*2;
				}
			}else if(crit)dmg*=1.2;

			dmg=random(dmg,maxdmg);

			//bleed
			if(
				bbloodlessimpact
				||hitactor.bnoblood
				||!hitactor.bshootable
			){
				Puff();
			}else if(
				pierce
				||(hdp&&hdp.woundcount>hdpwoundcount)
			){
				vector3 hitdir=blt.hitdir;
				for(int i=0;i<dmg;i+=60){
					bool gbg;actor blood;
					[gbg,blood]=hitactor.A_SpawnItemEx(
						hitactor.bloodtype,
						hitactor.radius*0.6,0,pos.z-hitactor.pos.z,
						angle:hitactor.angleto(self),
						flags:SXF_USEBLOODCOLOR|SXF_NOCHECKPOSITION
					);
					if(blood){
						blood.vel=
							(throughthis==hitactor?hitdir:-hitdir)
							*(0.03*dmg)
							+(frandom(-0.2,0.2),frandom(-0.2,0.2),frandom(-0.2,0.4));
					}
				}
			}

			//apply damage
			if(!bnodamage){
				if(hitactor.health<1){
					int gibs=max(randompick(0,0,0,1),dmg*0.1);
					hdf.give(hitactor,"SawGib",gibs);
				}else{
					if(pierce||pushfactor<1.){
						HDBulletDamager.Get(hitactor,self,target,dmg,damagetype);
						if(
							pierce
							&&hitactor.bshootable
							&&!hitactor.bnodamage
							&&!hdp
						)hdwound.inflict(hitactor,
							random((mass>>6),dmg)
						);
					}else{
						hitactor.damagemobj(self,target,dmg,damagetype,DMG_THRUSTLESS);
						if(hd_debug){
							string targ="";
							if(hitactor.player)targ=hitactor.player.getusername();
								else targ=hitactor.getclassname();
							A_Log(string.format("%s \ca%i \cj%s  \cu(%s)",self.getclassname(),dmg,targ,damagetype));
						}
					}
				}
			}

			//reduce speed
			vel*=min(0.99,netpenetration);
			double rvel=
				min(0.99,netpenetration)*pushfactor*speed*0.2
			;
			vel+=(frandom(-rvel,rvel),frandom(-rvel,rvel),frandom(-rvel,rvel));

			//destroy if too slow
			if(hitactor!=throughthis||vel dot vel<(50*50)){
				bmissile=false;
				setstatelabel("death");
			}
			return;
		}

		//gross hack because I can't handle whether it's a 3D floor otherwise
		bool bsht;
		if(target){
			bsht=target.bshootable;
			target.bshootable=false;
		}
		lineattack(
			angle,2.,pitch,(speed+mass)*0.012+woundhealth,
			"SmallArms1","CheckPuff",
			LAF_NORANDOMPUFFZ|LAF_TARGETISSOURCE|LAF_NOIMPACTDECAL|LAF_OVERRIDEZ,
			offsetz:-blt.hitdir.z,offsetforward:-cos(pitch)
		);
		if(target)target.bshootable=bsht;

		//it's (probably) not coming back up
		bool zricochet=false;
		if(blt.hittype==Trace_HitFloor){
			if(floorpic==skyflatnum){
				setstatelabel("death");return;
			}
			zricochet=true;
		}
		//but it can come back down
		else if(blt.hittype==Trace_HitCeiling){
			if(ceilingpic==skyflatnum){
				setorigin(posbak+vel,true);
				inthesky=true;
				binvisible=true;
				skypos=pos;
				return;
			}
			zricochet=true;
		}
		//another way to come up or down
		if(zricochet){
			setz(clamp(pos.z,floorz+1,ceilingz-1));
			double velxy=max(abs(vel.x),abs(vel.y));
			if(
				frandom(-speed,frandom(-speed,velxy))
				>abs(vel.z)
			){
				Puff(speed*0.3);
				vel.z=-frandom(0.1,0.9)*vel.z;
				vel.xy=rotatevector(vel.xy,frandom(-45,45)*pushfactor);
				vel*=frandom(0.6,0.9);
				return;
			}
		}

		//this covers a few things that hittype does not
		int hitresult=0;
		if(blt.hitline){
			if(blt.hitline.special==Line_Horizon){
				destroy();
				return;
			}

			blt.hitline.activate(target,blt.lineside,SPAC_Impact);
			setorigin(blt.hitlocation-blt.hitdir,false);
			if(penetration>0)A_SprayDecal(penetration>4?"BulletChip":"BulletChipSmall",10);

			//ricochet
			if(!random(0,10)){
				flinetracedata ricosuave;
				LineTrace(
					angle-40,
					4,
					0,
					flags:TRF_THRUACTORS,
					offsetforward:-1,
					data:ricosuave
				);
				Puff(speed*0.3);
				vel.z=frandom(-0.9,0.9)*vel.z;
				vel.xy*=frandom(0.6,0.9);
				double rnd=frandom(0,90);
				if(ricosuave.hitline==blt.hitline){
					vel.xy=rotatevector((speed,0),angle+rnd);
				}else{
					vel.xy=rotatevector((speed,0),angle-rnd);
				}
				return;
			}
			setorigin(blt.hitlocation,true);

			//evaluate hitlineresult
			if(
				!blt.hitline.backsector
				&&blt.hitline.frontsector!=blt.hitsector
			)hitresult=BLT_HITONESIDED;
			else{
				othersector=hdmath.oppositesector(blt.hitline,blt.hitsector);

				if(!othersector)hitresult=BLT_HITONESIDED;else{
					vector2 zatpointer=plushitdir.xy;
					double otherceilingz=othersector.ceilingplane.zatpoint(zatpointer);
					double otherfloorz=othersector.floorplane.zatpoint(zatpointer);
	
					double hitz=blt.hitlocation.z;
					if(hitz>otherceilingz)hitresult=BLT_HITTOP;
					else if(hitz<otherfloorz)hitresult=BLT_HITTOP;
					else hitresult=BLT_HITMIDDLE;
				}
			}
		}else{
			if(blt.hittype==Trace_HitFloor)hitresult=BLT_HITBOTTOM;
			else if(blt.hittype==Trace_HitCeiling)hitresult=BLT_HITTOP;
		}
		//thin sheet of something that you can't walk through
		if(hitresult==BLT_HITMIDDLE){
			setorigin(plushitdir,true);
			return;
		}
		//have to drill through floor or ceiling
		else if(hitresult==BLT_HITTOP||hitresult==BLT_HITBOTTOM){
			//but first, sky check
			if(
				othersector&&
				othersector.gettexture(othersector.ceiling)==skyflatnum
				&&othersector.ceilingplane.zatpoint
					(plushitdir.xy)<blt.hitlocation.z
			){
				setorigin(pos+vel,true);
				inthesky=true;
				return;
			}

			bool areaclear=false;
			vector3 hitdir=blt.hitdir*4; //4 because we don't want to waste too much time
			vector3 hitloc=blt.hitlocation;
			for(int i=0;i<penetration;i+=4){
				hitloc+=hitdir;
				setorigin(hitloc,true);
				double posz=pos.z;
				if(posz>=floorz&&posz<=ceilingz){
					areaclear=true;
					break;
				}
			}
			if(areaclear){
				setorigin(blt.hitlocation,true);
				Puff(speed*0.6);
				emergefromimpact(hitloc);
				double vd=(blt.hitlocation-hitloc).length();
				if(vd>=penetration)dieonimpact(blt.hitlocation-blt.hitdir*4);
				else vel*=(penetration-vd)/max(penetration,1);
				return;
			}else{
				dieonimpact(blt.hitlocation-blt.hitdir*4);
				return;
			}
		}
		//into the void behind every rock
		else if(hitresult==BLT_HITONESIDED){
			if(blt.hitline.special==Line_Horizon){setstatelabel("death");return;}
			setorigin(plushitdir,true);
			flinetracedata voidprobe;
			LineTrace(
				angle,
				penetration*0.6, //these are usually structural rather than doors
				pitch,
				flags:0,
				data:voidprobe
			);
			if(voidprobe.hitline&&voidprobe.distance<penetration){
				Puff(speed*0.6);
				emergefromimpact(voidprobe.hitlocation+voidprobe.hitdir);
				double vd=voidprobe.distance;
				vel*=(penetration-vd)/max(penetration,1);
				return;
			}else{
				//splat against a very thick wall
				dieonimpact(blt.hitlocation-blt.hitdir*4);
				return;
			}
		}

		//drop
		if(vel.z>BULLET_TERMINALVELOCITY)vel.z-=grav;

		//nexttic
		if(CheckNoDelay()){
			if(tics>0)tics--;  
			while(!tics){
				if(!SetState(CurState.NextState)){
					return;
				}
			}
		}
	}

	virtual void DieOnImpact(vector3 deathspot){
		setorigin(deathspot,true);
		Puff();
		setstatelabel("death");
	}
	virtual void EmergeFromImpact(vector3 emergespot){
		setorigin(emergespot+blt.hitdir,true);
		if(max(abs(pos.x),abs(pos.y))>=32768){setstatelabel("death");return;}
		angle+=180;pitch=-pitch;
		A_SprayDecal("BulletChip",10);
		A_SpawnItemEx("PenePuff",
			xvel:-1,zvel:vel.z/max(speed,1),
			flags:SXF_NOCHECKPOSITION
		);
		angle+=180;pitch=-pitch;
		setorigin(emergespot,true);

		double rvel=
			penetration*pushfactor*speed*0.0006
		;
		vel+=(frandom(-rvel,rvel),frandom(-rvel,rvel),frandom(-rvel,rvel));
	}

	virtual actor Puff(int sp=0){
		if(max(abs(pos.x),abs(pos.y))>=32768)return null;
		if(!sp)sp=speed;
		name pufftype="BulletPuffBig";
		if(sp>800){
			pufftype="BulletPuffBig";
		}else if(sp>512){
			pufftype="BulletPuffMedium";
		}else{
			pufftype="BulletPuffSmall";
		}
		bool gbg;actor ppp;
		[gbg,ppp]=A_SpawnItemEx(pufftype,flags:
			SXF_NOCHECKPOSITION
		);
		return ppp;
	}
	virtual void Gunsmoke(){
		actor gs;
		double j=cos(pitch);
		vector3 vk=(j*cos(angle),j*sin(angle),-sin(pitch));
		j=max(1,speed*min(mass,100)*0.00001);
		for(int i=0;i<j;i++){
			gs=spawn("HDGunSmoke",pos+i*vk,ALLOW_REPLACE);
			gs.pitch=pitch;gs.angle=angle;gs.vel=vk*j;
		}
	}
	void LongArmWobble(){
		let hdp=hdplayerpawn(target);
		if(hdp&&hdp.scopecamera){
			pitch+=deltaangle(hdp.pitch,hdp.scopecamera.pitch);
			angle+=deltaangle(hdp.angle,hdp.scopecamera.angle);
		}else if(countinv("IsMoving",AAPTR_TARGET)>=10){
			pitch+=frandom(-2,2);
			angle+=frandom(-1,1);
		}
	}
}
class NewBulletMovePuff:CheckPuff{
	default{
		+skyexplode //important!
	}
}
class SupersonicTrail:IdleDummy{
	states{
	spawn:
		TNT1 A 10;stop;
	}
	override void postbeginplay(){
		if(
			frandom(0,ceilingz-floorz)<128
		)A_AlertMonsters();
		A_PlaySound("weapons/bulletcrack",CHAN_AUTO,0.32);
	}
}
class SupersonicTrailBig:SupersonicTrail{
	override void postbeginplay(){
		A_AlertMonsters();
		A_PlaySound("weapons/bulletcrack",CHAN_AUTO,0.42);
	}
}
class SupersonicTrailSmall:SupersonicTrail{
	override void postbeginplay(){
		if(
			frandom(0,ceilingz-floorz)<64
		)A_AlertMonsters();
		A_PlaySound("weapons/bulletcrack",0,0.1);
	}
}
class SubsonicTrail:SupersonicTrail{
	override void postbeginplay(){
		if(
			frandom(0,ceilingz-floorz)<32
		)A_AlertMonsters();
		A_PlaySound("weapons/subfwoosh",0,0.03);
	}
}




//consolidates bullet damage done in the same tic
class HDBulletDamager:Thinker{
	array<int> damages;
	array<int> damagetypes;
	int ticker;
	actor victim;
	actor lastattacker;
	actor lastinflictor;
	override void postbeginplay(){
		super.postbeginplay();
	}
	static HDBulletDamager Get(actor caller,actor inflictor,actor attacker,int damage,name damagetype){
		thinkeriterator hdbd=ThinkerIterator.create("HDBulletDamager");
		hdbulletdamager hdbdd;
		while(hdbdd=hdbulletdamager(hdbd.next(true))){
			if(hdbdd.victim==caller)break;
		}
		if(!hdbdd){
			hdbdd=new("hdbulletdamager");
			hdbdd.victim=caller;
			hdbdd.ticker=2;
		}

		hdbdd.lastattacker=attacker;
		hdbdd.lastinflictor=inflictor;
		int dtype=-1;
		if(damagetype=="SmallArms0")dtype=0;
		else if(damagetype=="SmallArms1")dtype=1;
		else if(damagetype=="SmallArms2")dtype=2;
		else if(damagetype=="SmallArms3")dtype=3;
		hdbdd.damagetypes.push(dtype);
		hdbdd.damages.push(damage);

		return hdbdd;
	}
	override void tick(){
		if(!victim){
			destroy();
			return;
		}
		if(victim.isfrozen())return;
		super.tick();
		ticker--;
		if(ticker>0)return;

		while(damages.size()<damagetypes.size()){
			damagetypes.pop();
		}
		while(damages.size()>damagetypes.size()){
			damages.pop();
		}

		int totaldamage=0;
		int strongestdamage=-1;
		for(int i=0;i<damages.size();i++){
			totaldamage+=damages[i]+random(1,(i>>3));
			if(strongestdamage<damagetypes[i])strongestdamage=damagetypes[i];
		}
		if(hd_debug){
			string victimname;
			if(victim.player)victimname=victim.player.getusername();
			else victimname=victim.getclassname();
			string attackername="nobody";
			if(lastattacker){
				if(lastattacker.player)attackername=lastattacker.player.getusername();
				else attackername=lastattacker.getclassname();
			}
			string inflictorname="bullet";
			if(lastinflictor)inflictorname=lastinflictor.getclassname();
			victim.A_Log(string.format("%s took \ca%i\cj %s damage from %s's %s",
				victimname,
				totaldamage,
				strongestdamage<0?"Bashing":string.format("SmallArms%i",strongestdamage),
				attackername,
				inflictorname
			));
		}

		name damagetype="Bashing";
		if(strongestdamage>2)damagetype="SmallArms3";
		else if(strongestdamage==2)damagetype="SmallArms2";
		else if(strongestdamage==1)damagetype="SmallArms1";
		else if(strongestdamage==0)damagetype="SmallArms0";
		int pcbak=victim.painchance;
		victim.painchance*=damages.size();
		victim.damagemobj(lastinflictor,lastattacker,totaldamage,damagetype,DMG_THRUSTLESS);
		if(victim)victim.painchance=pcbak;

		destroy();
	}
}








//the actual bullets!
class HDBulletFrag:HDBullet{
	default{
		woundhealth 6;
	}
	override void postbeginplay(){
		HDActor.PostBeginPlay();

		grav=getgravity();
		pushfactor=frandom(0.8,2.);
		mass=random(100,150);
		accuracy=random(3,6);
	}
	override actor Puff(int sp){
		if(max(abs(pos.x),abs(pos.y))>=32768)return null;
		actor ppp;
		[sp,ppp]=A_SpawnItemEx("FragPuff",flags:
			SXF_NOCHECKPOSITION
		);
		return ppp;
	}
}
class HDBullet9:HDBullet{
	default{
		pushfactor 0.5;
		mass 1539;
		speed 420;
		accuracy 4;
		woundhealth 3;
	}
}
class HDBullet426:HDBullet{
	default{
		pushfactor 0.4;
		mass 320;
		speed 1200;
		accuracy 6;
		woundhealth 18;
		hdbullet.distantsounder "DistantRifle";
	}
}
class HDBullet776:HDBullet{
	default{
		pushfactor 0.25;
		mass 1344;
		speed 1100;
		accuracy 12;
		woundhealth 16;
		hdbullet.distantsounder "DoubleDistantRifle";
	}
}
class HDBullet00:HDBullet{
	default{
		pushfactor 0.9;
		mass 576;
		accuracy 4;
		woundhealth 2;
	}
	override void postbeginplay(){
		HDActor.postbeginplay();
		Gunsmoke();
		grav=getgravity();
	}
}
class HDBullet00b:HDBullet00{
	default{
		stamina 7; //claymores in the future?
		speed 700;
		pushfactor 0.6;
	}
	override void postbeginplay(){
		LongArmWobble();
		spawn("DistantShotgun",pos,ALLOW_REPLACE);
		actor bb;
		double p=pushfactor;
		for(int i=stamina;i;i--){
			bb=spawn("HDBullet00",pos,ALLOW_REPLACE);
			hdbullet(bb).throughthis=target;
			bb.target=target;bb.pitch=pitch;bb.angle=angle;if(target)bb.vel=target.vel;
			bb.speed=speed+speed*frandom(-p,p);
			bb.pitch+=frandom(-p,p);
			bb.angle+=frandom(-p,p);
			bb.A_ChangeVelocity(bb.speed*cos(bb.pitch),0,bb.speed*sin(-bb.pitch),CVF_RELATIVE);
		}
		destroy();
	}
}
class HDBullet00bfl:HDBullet00b{
	default{
		speed 850;
		pushfactor 0.3;
		accuracy -1;
	}
	override void postbeginplay(){
		LongArmWobble();
		setorigin(pos+(cos(angle-90),sin(angle-90),0)*accuracy,false);
		spawn("DistantShotgun",pos,ALLOW_REPLACE);
		angle+=accuracy*0.1;

		actor bb;
		double p=pushfactor;
		for(int i=stamina;i;i--){
			bb=spawn("HDBullet00",pos,ALLOW_REPLACE);
			hdbullet(bb).throughthis=target;
			bb.target=target;bb.pitch=pitch;bb.angle=angle;if(target)bb.vel=target.vel;
			bb.speed=speed+speed*frandom(-p,p);
			bb.pitch+=frandom(-p,p);
			bb.angle+=frandom(-p,p);
			bb.A_ChangeVelocity(
				bb.speed*cos(bb.pitch),0,
				bb.speed*sin(-bb.pitch),CVF_RELATIVE
			);
		}
		destroy();
	}
}
class HDBullet00bfr:HDBullet00bfl{
	default{
		accuracy 1;
	}
}
class HDBullet00bf2:HDBullet00bfl{
	override void postbeginplay(){
		LongArmWobble();
		for(double i=-1;i<=3;i+=3){
			setorigin(pos+(cos(angle-90),sin(angle-90),0)*i,false);
			spawn("DistantShotgun",pos,ALLOW_REPLACE);
			angle+=i*0.1;

			actor bb;
			double p=pushfactor;
			for(int ii=stamina;ii;ii--){
				bb=spawn("HDBullet00",pos,ALLOW_REPLACE);
				hdbullet(bb).throughthis=target;
				bb.target=target;bb.pitch=pitch;bb.angle=angle;if(target)bb.vel=target.vel;
				bb.speed=speed+speed*frandom(-p,p);
				bb.pitch+=frandom(-p,p);
				bb.angle+=frandom(-p,p);
				bb.A_ChangeVelocity(
					bb.speed*cos(bb.pitch),0,
					bb.speed*sin(-bb.pitch),CVF_RELATIVE
				);
			}
		}
		destroy();
	}
}


